@import "include-media";

//
// Normalize
//-----------------------------------------------------------------------------
@import "normalize";

//
// Grid
//-----------------------------------------------------------------------------

@mixin make-ratio-row($class, $ratio, $cols){

  /*
     Row with #{$cols} columns
  ------------------------------------------ */

 // Define first value in cols map
 $colsmap: (
  1: 1
 );

 // Start the total value of all cols
 $cols-total: 1;

 // Add values for each col to $colsmap
 @for $i from 2 through $cols {
   // value of this col is the prev * ratio
  $new-col-val: map-get($colsmap, $i - 1)*$ratio;
  $colsmap: map-merge($colsmap, ($i: $new-col-val));
  $cols-total: $cols-total + $new-col-val;
 }

$colwidthsmap: (
  1:null
);
 // return widths for each column
 @for $i from 1 through $cols {
   $value: map-get($colsmap, $i);
   $colwidth: ($value/$cols-total)*100%;
   $colwidthsmap: map-merge($colwidthsmap, ($i: $colwidth));

   .col-#{$class}-#{$i}-#{$cols} {
      width: $colwidth;
    }
 }

$colspans: $cols - 1;

 @for $i from 1 through $colspans {
    $ipp: $i + 1;
    $nextcol: $cols + $i;
    @debug $nextcol;
    $nextcolwidth: map-get($colwidthsmap, $nextcol - 1) + map-get($colwidthsmap, $cols - $i);
    $colwidthsmap: map-merge($colwidthsmap, ($nextcol: $nextcolwidth));

   .col-#{$class}-#{$nextcol}-#{$cols} {
      width: $nextcolwidth;
    }
 }

} // ratio-row


@mixin make-ratio-grid($class, $ratio, $cols) {
  /*
    #{$ratio} grid
    Ratio grid using #{$ratio} and a max of #{$cols} cols
  ------------------------------------------ */
  @for $i from 2 through $cols {
    @include make-ratio-row($class, $ratio, $i);
  }

} // ratio-grid

//
// Utilities
//-----------------------------------------------------------------------------

@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
  // For IE 6/7 (trigger hasLayout)s
  zoom: 1;
}
